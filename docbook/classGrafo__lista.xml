<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classGrafo__lista" xml:lang="pt">
<title>Referência à classe Grafo_lista</title>
<indexterm><primary>Grafo_lista</primary></indexterm>
Diagrama de heranças da classe Grafo_lista<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classGrafo__lista__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Diagrama de colaboração para Grafo_lista:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classGrafo__lista__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Membros públicos    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classGrafo__lista_1a4553b359b56bd157b904fc7ea1e53612">Grafo_lista</link> ()</para>
</listitem>
            <listitem><para><link linkend="_classGrafo__lista_1a4f99c7aac3bda88d192fe28985d93ae5">~Grafo_lista</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_classGrafo__lista_1a9f1cc47af2a3ad817239af214cea4814">insereVertice</link> (int val)</para>
</listitem>
            <listitem><para>void <link linkend="_classGrafo__lista_1aa2e24d98645256ce6adfec71e3375ea4">insereAresta</link> (int origem, int destino, int val)</para>
</listitem>
            <listitem><para>void <link linkend="_classGrafo__lista_1a81196269ae03d761aa139eb38550ada6">removeAresta</link> (int i, int j)</para>
</listitem>
            <listitem><para>int <link linkend="_classGrafo__lista_1a1b28e04f39454e499c2e953f9ded7bcb">getNConexo</link> ()</para>
</listitem>
            <listitem><para>int <link linkend="_classGrafo__lista_1a0e51985546b147482be914cb8ff23a7a">getGrau</link> ()</para>
</listitem>
            <listitem><para>bool <link linkend="_classGrafo__lista_1af08e48645dfb14e720836f6fe35d918e">eh_bipartido</link> ()</para>
</listitem>
            <listitem><para>bool <link linkend="_classGrafo__lista_1adb75edbf0baf2878ea2421407ed7fc14">eh_completo</link> ()</para>
</listitem>
            <listitem><para>bool <link linkend="_classGrafo__lista_1a55f663b2ebddb096f2b6861e9e461257">eh_arvore</link> ()</para>
</listitem>
            <listitem><para>bool <link linkend="_classGrafo__lista_1aadc2f2ab73280ab8f740fa3f3a58ee06">possuiArticulacao</link> ()</para>
</listitem>
            <listitem><para>bool <link linkend="_classGrafo__lista_1a92829014e6be32034cbb1fc2c37745e4">possuiPonte</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
Membros públicos herdados de <link linkend="_classGrafoAbstract">GrafoAbstract</link>        <itemizedlist>
            <listitem><para>bool <emphasis role="strong">eh_direcionado</emphasis> ()</para>
</listitem>
            <listitem><para>bool <emphasis role="strong">verticePonderado</emphasis> ()</para>
</listitem>
            <listitem><para>bool <emphasis role="strong">arestaPonderada</emphasis> ()</para>
</listitem>
            <listitem><para>int <emphasis role="strong">getOrdem</emphasis> ()</para>
</listitem>
            <listitem><para>void <emphasis role="strong">criaCompleto</emphasis> (ofstream &amp;outFile, int ordem, bool arestaPonderada, bool direcionado)</para>
</listitem>
            <listitem><para>void <emphasis role="strong">criaArvore</emphasis> (ofstream &amp;outFile, int ordem, bool arestaPonderada, bool direcionado, int grau)</para>
</listitem>
            <listitem><para>bool <emphasis role="strong">criaBipartido</emphasis> (ofstream &amp;outFile, int ordem, bool arestaPonderada, bool direcionado, int grau, int componentesConexas, int ponte, int articulacao)</para>
</listitem>
            <listitem><para>void <link linkend="_classGrafoAbstract_1ab984ce94223715702b594fb3fd12bed4">carregaGrafo</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_classGrafoAbstract_1acda8a9c27b0ecbf193ae6687dc2d46c0">novoGrafo</link> ()</para>
</listitem>
            <listitem><para>void <emphasis role="strong">limpaArquivo</emphasis> (ofstream &amp;outFile, string nomeArquivo)</para>
</listitem>
            <listitem><para>void <emphasis role="strong">imprimeGrafo</emphasis> ()</para>
</listitem>
            <listitem><para>void <link linkend="_classGrafoAbstract_1ab660e47d44e19b375952706ee825b598">criaGrafo</link> (int ordem, int grau, bool direcionado, int componentesConexas, bool ponte, bool articulacao, bool completo, bool bipartido, bool arvore)</para>
</listitem>
            <listitem><para>bool <link linkend="_classGrafoAbstract_1a1a9eb117bcd88e0a355e64ea9b1e98d9">grafoPronto</link> (int ordem, int grau, bool direcionado, int cc, bool ponte, bool articulacao, bool completo, bool bipartido, bool arvore)</para>
</listitem>
        </itemizedlist>
<section>
<title>Documentação dos Construtores &amp; Destrutor</title>
<anchor xml:id="_classGrafo__lista_1a4553b359b56bd157b904fc7ea1e53612"/><section>
    <title>Grafo_lista()</title>
<indexterm><primary>Grafo_lista</primary><secondary>Grafo_lista</secondary></indexterm>
<indexterm><primary>Grafo_lista</primary><secondary>Grafo_lista</secondary></indexterm>
<para><computeroutput>Grafo_lista::Grafo_lista ( )</computeroutput></para>
<para>Construtor da classe Grafo lista </para>
</section>
<anchor xml:id="_classGrafo__lista_1a4f99c7aac3bda88d192fe28985d93ae5"/><section>
    <title>~Grafo_lista()</title>
<indexterm><primary>~Grafo_lista</primary><secondary>Grafo_lista</secondary></indexterm>
<indexterm><primary>Grafo_lista</primary><secondary>~Grafo_lista</secondary></indexterm>
<para><computeroutput>Grafo_lista::~Grafo_lista ( )</computeroutput></para>
<para>Destrutor da classe Grafo lista </para>
</section>
</section>
<section>
<title>Documentação das funções</title>
<anchor xml:id="_classGrafo__lista_1a55f663b2ebddb096f2b6861e9e461257"/><section>
    <title>eh_arvore()</title>
<indexterm><primary>eh_arvore</primary><secondary>Grafo_lista</secondary></indexterm>
<indexterm><primary>Grafo_lista</primary><secondary>eh_arvore</secondary></indexterm>
<para><computeroutput>bool Grafo_lista::eh_arvore ( )<computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Verifica e retorna se o grafo é uma árvore </para>
<para>
Implementa <link linkend="_classGrafoAbstract">GrafoAbstract</link>.</para>
</section>
<anchor xml:id="_classGrafo__lista_1af08e48645dfb14e720836f6fe35d918e"/><section>
    <title>eh_bipartido()</title>
<indexterm><primary>eh_bipartido</primary><secondary>Grafo_lista</secondary></indexterm>
<indexterm><primary>Grafo_lista</primary><secondary>eh_bipartido</secondary></indexterm>
<para><computeroutput>bool Grafo_lista::eh_bipartido ( )<computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Verifica e retorna se o grafo é bipartido utilizando de coloração de vértices para determinar </para>
<para>
Implementa <link linkend="_classGrafoAbstract">GrafoAbstract</link>.</para>
</section>
<anchor xml:id="_classGrafo__lista_1adb75edbf0baf2878ea2421407ed7fc14"/><section>
    <title>eh_completo()</title>
<indexterm><primary>eh_completo</primary><secondary>Grafo_lista</secondary></indexterm>
<indexterm><primary>Grafo_lista</primary><secondary>eh_completo</secondary></indexterm>
<para><computeroutput>bool Grafo_lista::eh_completo ( )<computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Verifica e retorna se o grafo é completo </para>
<para>
Implementa <link linkend="_classGrafoAbstract">GrafoAbstract</link>.</para>
</section>
<anchor xml:id="_classGrafo__lista_1a0e51985546b147482be914cb8ff23a7a"/><section>
    <title>getGrau()</title>
<indexterm><primary>getGrau</primary><secondary>Grafo_lista</secondary></indexterm>
<indexterm><primary>Grafo_lista</primary><secondary>getGrau</secondary></indexterm>
<para><computeroutput>int Grafo_lista::getGrau ( )<computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Calcula e retorna o grau do grafo </para>
<para>
Implementa <link linkend="_classGrafoAbstract">GrafoAbstract</link>.</para>
</section>
<anchor xml:id="_classGrafo__lista_1a1b28e04f39454e499c2e953f9ded7bcb"/><section>
    <title>getNConexo()</title>
<indexterm><primary>getNConexo</primary><secondary>Grafo_lista</secondary></indexterm>
<indexterm><primary>Grafo_lista</primary><secondary>getNConexo</secondary></indexterm>
<para><computeroutput>int Grafo_lista::getNConexo ( )<computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Calcula e retorna o número de componentes conexas do grafo </para>
<para>
Implementa <link linkend="_classGrafoAbstract">GrafoAbstract</link>.</para>
</section>
<anchor xml:id="_classGrafo__lista_1aa2e24d98645256ce6adfec71e3375ea4"/><section>
    <title>insereAresta()</title>
<indexterm><primary>insereAresta</primary><secondary>Grafo_lista</secondary></indexterm>
<indexterm><primary>Grafo_lista</primary><secondary>insereAresta</secondary></indexterm>
<para><computeroutput>void Grafo_lista::insereAresta (int origem, int destino, int val)<computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Insere aresta ao indicar o vértice de origem, o vértice de destino e o peso da aresta </para>
<para>
Implementa <link linkend="_classGrafoAbstract">GrafoAbstract</link>.</para>
</section>
<anchor xml:id="_classGrafo__lista_1a9f1cc47af2a3ad817239af214cea4814"/><section>
    <title>insereVertice()</title>
<indexterm><primary>insereVertice</primary><secondary>Grafo_lista</secondary></indexterm>
<indexterm><primary>Grafo_lista</primary><secondary>insereVertice</secondary></indexterm>
<para><computeroutput>void Grafo_lista::insereVertice (int val)<computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Insere vértice com peso &quot;val&quot; </para>
<para>
Implementa <link linkend="_classGrafoAbstract">GrafoAbstract</link>.</para>
</section>
<anchor xml:id="_classGrafo__lista_1aadc2f2ab73280ab8f740fa3f3a58ee06"/><section>
    <title>possuiArticulacao()</title>
<indexterm><primary>possuiArticulacao</primary><secondary>Grafo_lista</secondary></indexterm>
<indexterm><primary>Grafo_lista</primary><secondary>possuiArticulacao</secondary></indexterm>
<para><computeroutput>bool Grafo_lista::possuiArticulacao ( )<computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Verifica e retorna se o grafo possui ao menos uma articulação ou não </para>
<para>
Implementa <link linkend="_classGrafoAbstract">GrafoAbstract</link>.</para>
</section>
<anchor xml:id="_classGrafo__lista_1a92829014e6be32034cbb1fc2c37745e4"/><section>
    <title>possuiPonte()</title>
<indexterm><primary>possuiPonte</primary><secondary>Grafo_lista</secondary></indexterm>
<indexterm><primary>Grafo_lista</primary><secondary>possuiPonte</secondary></indexterm>
<para><computeroutput>bool Grafo_lista::possuiPonte ( )<computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Verifica e retorna se o grafo possui ao menos uma ponte ou não </para>
<para>
Implementa <link linkend="_classGrafoAbstract">GrafoAbstract</link>.</para>
</section>
<anchor xml:id="_classGrafo__lista_1a81196269ae03d761aa139eb38550ada6"/><section>
    <title>removeAresta()</title>
<indexterm><primary>removeAresta</primary><secondary>Grafo_lista</secondary></indexterm>
<indexterm><primary>Grafo_lista</primary><secondary>removeAresta</secondary></indexterm>
<para><computeroutput>void Grafo_lista::removeAresta (int i, int j)<computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Remove uma aresta ao passar o vértice de origem e qual o vértice que deve ser removido </para>
<para>
Implementa <link linkend="_classGrafoAbstract">GrafoAbstract</link>.</para>
</section>
<para>
A documentação para esta classe foi gerada a partir dos seguintes ficheiros:</para>
Grafo_lista.hGrafo_lista.cpp</section>
</section>
